#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cstring>
#include <iomanip>
#include <iostream>
#include <map>
#include <queue>
#include <random>
#include <set>
#include <stack>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

// BEGIN NO SAD
#define rep(i, a, b) for(int i = a; i < (b); ++i)
#define trav(a, x) for(auto& a : x)
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
typedef vector<int> vi;
#define f first
#define s second
#define mp make_pair
#define pb push_back
#define eb emplace_back
#define lb lower_bound
#define ub upper_bound
typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
// END NO SAD
// REMEMBER CLEAR GLOBAL STATE
// REMEMBER READ THE PROBLEM STATEMENT AND DON'T SOLVE A DIFFERENT PROBLEM
// remember hidden T factor of 1e2
// read the bounds for stupid cases
// did you restart your editor

int freq[1005];
    int maximumUniqueSubarray(vector<int>& nums) {
        int n = nums.size();
        int lhs = 0;
        int ret = 0;
        int curr = 0;
        for(int i = 0; i < n; i++) {
          while(freq[nums[i]] > 0) {
            curr -= nums[lhs];
            freq[nums[lhs++]]--;
          }
          curr += nums[i];
          freq[nums[i]]++;
          ret = max(ret, curr);
        }
        for(int out: nums) freq[out] = 0;
        return ret;
    }
    
    
    /* here the main idea is to find the maxelement with all the not including duplicate values*/
