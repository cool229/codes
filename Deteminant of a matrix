
#include <bits/stdc++.h>
using namespace std;
// Dimension of input square matrix
#define N 100
void getCofactor(int mat[N][N], int temp[N][N], int p, int q, int n){
    
    int i=0, j=0;
    for(int row = 0;row<n;row++){
        for(int col = 0;col<n;col++){
            if(row != p && col != q){
                temp[i][j++] = mat[row][col];
                if(j == n-1){
                    j=0;
                    i++;
                }
        }
    }
    }
}
int determinantOfMatrix( int mat[N][N], int n)
{
    int sum = 0;
    int sign = 1;
    if(n == 1)
        return mat[0][0];
    int temp[N][N];
    for(int f = 0; f< n;f++){
        getCofactor(mat, temp, 0, f, n);
        sum += sign * mat[0][f] * determinantOfMatrix(temp, n-1);
        sign = -sign;
    }
    return sum;
    
}


//Position this line where user code will be pasted.
// Driver program to test above functions
int main()
{
	  int t;
	cin>>t;
	while(t--)
	{
	  int no;
	cin>>no;
	  int mat[N][N];
	for(  int i=0;i<no;i++)
	{
	    for(  int j=0;j<no;j++)
	    {
	        cin>>mat[i][j];
	    }
	}
	printf("%d",determinantOfMatrix(mat, no));
	printf("
");
	}
	return 0;
}

void getCofactor(int mat[N][N], int temp[N][N], int p, int q, int n){
    
    int i=0, j=0;
    for(int row = 0;row<n;row++){
        for(int col = 0;col<n;col++){
            if(row != p && col != q){
                temp[i][j++] = mat[row][col];
                if(j == n-1){
                    j=0;
                    i++;
                }
        }
    }
    }
}
int determinantOfMatrix( int mat[N][N], int n)
{
    int sum = 0;
    int sign = 1;
    if(n == 1)
        return mat[0][0];
    int temp[N][N];
    for(int f = 0; f< n;f++){
        getCofactor(mat, temp, 0, f, n);
        sum += sign * mat[0][f] * determinantOfMatrix(temp, n-1);
        sign = -sign;
    }
    return sum;
    
}
